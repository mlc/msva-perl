#!/usr/bin/perl -wT

use warnings;
use strict;

{
  package MSVA;

  use HTTP::Server::Simple::CGI;
  use base qw(HTTP::Server::Simple::CGI);
  use warnings;
  use strict;
  use Crypt::GPG;
  use Crypt::X509;

  use JSON;

  my %dispatch = (
                  '/reviewcert' => \&reviewcert,
                  '/extracerts' => \&extracerts,
                 );


  sub new {
    my $class = shift;
    # start the server on port 8901
    my $self = $class->SUPER::new(8901);

    $self->{_gpg} = new Crypt::GPG;

    bless ($self, $class);
    return $self;
  }

  sub handle_request {
    my $self = shift;
    my $cgi  = shift;

    my $path = $cgi->path_info();
    my $handler = $dispatch{$path};

    if (ref($handler) eq "CODE") {
      # FIXME: ensure that this actually is a POST
      printf STDERR ("Got POST %s\n", $path);

      my ($status, $object) = $handler->($cgi);
      my $ret = to_json($object);
      printf STDERR ("returning: %s\n", $ret);
      printf("HTTP/1.0 %s\r\nContent-Type: application/json\r\n\r\n%s", $status, $ret);

    } else {
      printf("HTTP/1.0 404 Not Found -- not handled by Monkeysphere validation agent\r\nContent-Type: text/plain\r\n\r\nHTTP/1.0 404 Not Found -- the path:\r\n   %s\r\nis not handled by the MonkeySphere validation agent.\r\nPlease try one of the following paths instead:\r\n\r\n%s\r\n", $path, ' * '.join("\r\n * ", keys %dispatch) );
    }
  }

  sub reviewcert {
    my $cgi  = shift;   # CGI.pm object
    return if !ref $cgi;

    # open a json blob instead of using CGI params.
    my $data = from_json($cgi->param('POSTDATA'));

    use Data::Dumper;
    my $uid = $data->{context}.'://'.$data->{uid};

    my $cert = Crypt::X509->new(cert => join('', map(chr, @{$data->{pkc}->{data}})));

    printf STDERR "cert subject was: %s\n", $cert->subject_cn();
    printf STDERR "cert issuer was: %s\n", $cert->issuer_cn();


    my $ret = { valid => JSON::true,
                message => sprintf('tried to validate "%s" through the OpenPGP Web of Trust', $uid) };
    my $status = '200 match found, authentication details to follow';

    return $status, $ret;
  }

  sub extracerts {
    my $cgi = shift;

    return '500 not yet implemented', { };
  }
}

my $server = MSVA->new();
$server->run();
